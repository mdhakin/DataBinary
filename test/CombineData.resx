<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="SF1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAGABoAwAAJgAAACAgAAABABgAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAAAD
        AAAAAAAAAAAAAAAAAAAAAAAAtbW1ra2tpaWlnZ2dlZWVjo6Oh4eHgYGBfX19eHh4dXV1cnJycHBwcHBw
        dXV1c3NzUFBQVVUAVlYAXFwAZWUAbGwAcXEAc3MAc3MAcXEAbGwAZWUAXFwAVlYAVVUAm5ubXl5eVVUA
        WFgAY2MAbm4Ad3cAf38Ag4MAg4MAf38Ad3cAbm4AY2MAWFgAVVUAoKCgbGxsVVUAXFwAamoAeHgAg4MA
        jIwA//8AkZEAjIwAg4MAeHgAamoAXFwAVVUAnZ2deHh4WFgAYWEAcHAA//8AiooAk5MA//8AmJgAk5MA
        //8Af38AcHAAYWEAWFgAoKCgg4ODWVkAYmIAcXEAf38A//8AkpIA//8AlZUA//8AiooAf38AcXEAYmIA
        WVkAoqKijIyMWFgAYmIAcHAAfX0Ah4cA//8A//8A//8Ajo4Ah4cAfX0AcHAAYmIAWFgAoKCglJSUV1cA
        X18A//8A//8A//8A//8AiooA//8A//8A//8A//8AbGwAX18AV1cAnZ2dnZ2dVVUAW1sAZ2cAcnIAenoA
        //8A//8A//8AgYEAenoAcnIAZ2cAW1sAVVUAlJSUoKCgUFAAV1cAYWEAa2sA//8AeHgA//8Ae3sA//8A
        cnIAa2sAYWEAV1cAUFAAjIyMoqKiTU0AUlIAWVkA//8Aa2sAcHAA//8AcnIAcHAA//8AY2MAWVkAUlIA
        TU0Ag4ODoKCgSkoATEwAUlIAWloAYWEAZmYA//8AaGgAZmYAYWEAWloAUlIATEwASkoAeHh4nZ2dRkYA
        RkYAS0sAUVEAWFgAXV0AXl4AXl4AXV0AWFgAUVEAS0sARkYARkYAbGxsoKCgR0cARUUAR0cATEwAUFAA
        VFQAV1cAV1cAVFQAUFAATEwAR0cARUUAR0cAXl5em5ubTEwAR0cARkYASkoATU0AT08AUFAAUFAAT08A
        TU0ASkoARkYAR0cATEwAUFBQjo6OdXV1cHBwcHBwcnJydXV1eHh4fX19gYGBh4eHjo6OlZWVnZ2dpaWl
        ra2ttbW1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAz
        MzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZGQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVU1NTUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFRUUoKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABeXl5ZWVk3Nze1tbWtra2lpaWdnZ2VlZWOjo6Hh4eBgYF9fX14eHh1dXVycnJwcHBwcHB1dXVz
        c3NEREQnJycnJycAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoaGhjY2NdXV07OztQUFBVVQBWVgBc
        XABlZQBsbABxcQBzcwBzcwBxcQBsbABlZQBcXABWVgBVVQCbm5tEREQmJiYnJycoKCgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAB0dHRubm5oaGhjY2NAQEBeXl5VVQBYWABjYwBubgB3dwB/fwCDgwCDgwB/fwB3dwBu
        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
        A///+B///////w==
</value>
  </data>
</root>